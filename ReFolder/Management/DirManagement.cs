using ReFolder.Dir;
using System;
using System.Collections.Generic;

namespace ReFolder.Management
{
    ///<summary>
    ///DirManagement implements IDirManagement
    ///</summary>
    [Serializable]
    public class DirManagement: IDirManagement
    {
        #region singleton 

        private DirRead DirRead { get; set; }
        private DirValidate DirValidate { get; set; }
        private FileWrite FileWrite { get; set; }
        private static DirManagement InstanceDirManagement { get; set; }
        //konstruktor do  wstrzykiwania singletonów przez metody
        private DirManagement(DirRead dirRead, DirValidate dirValidate, FileWrite fileWrite)
        {
            this.DirRead = dirRead;
            this.DirValidate = dirValidate;
            this.FileWrite = fileWrite;
        }
        public static DirManagement GetDefaultInstance()
        {
            if (InstanceDirManagement == null)
            {
                InstanceDirManagement = new DirManagement(DirRead.GetDefaultInstance(), DirValidate.GetDefaultInstance(), FileWrite.GetDefaultInstance()); ;
            }
            return InstanceDirManagement;
        }
        public static DirManagement InitializeInstance(DirRead dirRead, DirValidate dirValidate, FileWrite fileWrite)
        {
            return new DirManagement(dirRead, dirValidate, fileWrite); ;
        }

        #endregion

        // tworzy nowy MainDir na podstawie ścieżki !! uwaga metoda powinna być użyta tylko jeden raz ponieważ zawsze zwraca NOWEGO mainDira
        // nie testowana
        public IEditableDirWithChildren GetFolderAsNewMainDir(string fullName)
        {
            if (String.IsNullOrWhiteSpace(fullName)) throw new ArgumentException("full name is empty or null");
            return DirRead.GetMainDirFolder(fullName);
        }
        // pozwala edytować plik systemowy.
        // Działa z ikonoą oraz notataką 
        /// <summary>
        /// overwrites desktop.ini and set new, folder and dir, note and Icon
        /// </summary>
        /// <param name="newNote"></param>
        /// <param name="dir"></param>
        /// <param name="iconAddress"></param>
        public void ChangeCreatedDirSystemValue( string newNote, IDir dir, string iconAddress)
        {
            if (String.IsNullOrWhiteSpace(newNote) && String.IsNullOrWhiteSpace(newNote)) throw new ArgumentException("one or more string is valid");
            dir = dir ?? throw new ArgumentNullException("dir is null");
           
             FileWrite.ReplaceSystemFolderInfoFile(dir.Description.FullName, newNote, iconAddress );
            dir.Description.Note = newNote;
            dir.Description.IconAddress = iconAddress;
        }

        public string AutoGenerateDirFullName(IEditableDirWithChildrenAndParent child)
        {
            child = child ?? throw new ArgumentNullException();
            string fullName = $"{child.ParentDir.Description.FullName}\\{child.Description.Name}";
            child.Description.FullName = fullName;
            return fullName;
        }
        public void AutoGenerateChildrenFullName(IEditableDirWithChildren dir)
        {
            if (dir == null) throw new ArgumentNullException("dir is null");
            foreach (IEditableDirWithChildrenAndParent childDir in dir.Children)
            {
                AutoGenerateDirFullName(childDir);
                if (childDir.Children.Count > 0)
                {
                    AutoGenerateChildrenFullName(childDir);
                }
                else continue;

            }
        }

    


    }
}
