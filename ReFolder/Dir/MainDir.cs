using System;
using System.Collections.Generic;
using System.Text;
using ReFolder.Dir.Description;
using ReFolder.Management;

namespace ReFolder.Dir
{
    [Serializable]
    public class MainDir : Dir, IEditableDirWithChildren
    { 
        public List<IEditableDirWithChildrenAndParent> Children { get; set; } = new List<IEditableDirWithChildrenAndParent>();

        #region constructors
        public MainDir(IMutableSystemObjectDescription description, List<IEditableDirWithChildrenAndParent> children): this( description)
        {
            if (children == null) throw new ArgumentNullException("one or more arguments are null");
            this.Children = children;
           
        }
        public MainDir(IMutableSystemObjectDescription description) : base(description)
        {
        }
        public MainDir() { }
        #endregion
        //usuwa childDir
        public void DeleteChildDirFromList(IEditableDirWithChildrenAndParent child)
        {
            if (child == null) throw new ArgumentNullException();
            Children.Remove(child);
        }
        //usuwa childrenDiry
        public void DeleteChildrenDirsFromList(List<IEditableDirWithChildrenAndParent> children)
        {
            if (children == null) throw new ArgumentNullException();
            foreach(IEditableDirWithChildrenAndParent child in children)
            {
                DeleteChildDirFromList(child);
            }
        }
        // dodaje childDir
        public void AddChildToChildrenList(IEditableDirWithChildrenAndParent child)
        {

            child= child ?? throw new ArgumentNullException();
            if ( DirValidate.IsNameExistingInChildrenDirs(this, child.Description.Name)) throw new InvalidOperationException($"folder named as {child.Description.Name}  exist in structure");
            child.ParentDir = this;
            DirManagement.AutoGenerateDirFullName(child);

            if (DirValidate.IsfolderExisting(child.Description.FullName)) throw new InvalidOperationException("you can't create folder that exist");
            Children.Add(child);
        }
        // dodaje childrenDiry
        public void AddChildrenToChildrenList(List<IEditableDirWithChildrenAndParent> children)
        {
            if (children == null) throw new ArgumentNullException();
            foreach (IEditableDirWithChildrenAndParent child in children)
            {
                AddChildToChildrenList(child);
            }
        }

        public override bool Equals(object obj)
        {
            return obj is MainDir dir &&
                   base.Equals(obj) &&
                   EqualityComparer<List<IEditableDirWithChildrenAndParent>>.Default.Equals(Children, dir.Children);
        }
        public override int GetHashCode()
        {
            var hashCode = 812589192;
            hashCode = hashCode * -1521134295 + base.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<List<IEditableDirWithChildrenAndParent>>.Default.GetHashCode(Children);
            return hashCode;
        }
    }
}
