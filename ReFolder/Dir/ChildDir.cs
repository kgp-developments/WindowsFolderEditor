using System;
using System.Collections.Generic;
using ReFolder.Dir.Description;

namespace ReFolder.Dir
{
    [Serializable]
    public class ChildDir : MainDir, IEditableDirWithChildrenAndParrent
    {
        public IEditableDirWithChildren ParrentDir { get; set; }

        #region konstruktory
        public ChildDir(IMutableSystemObjectDescription description, IEditableDirWithChildren mainDir,  List<IEditableDirWithChildrenAndParrent> childrens) : base( description, childrens)
        {
            this.ParrentDir = mainDir;
        }
        public ChildDir(IMutableSystemObjectDescription description, IEditableDirWithChildren mainDir) : base(description)
        {
            this.ParrentDir = mainDir;
        }
        public ChildDir(string descriptionName, IEditableDirWithChildren mainDir)
        {
            try
            {
                this.ParrentDir = mainDir;
                DirDescription dirDescription = new DirDescription(
                    name: descriptionName,
                    fullName: $"{mainDir.Description.FullName}\\{descriptionName}"
                    );

                Description = dirDescription;
            }catch(NullReferenceException e)
            {
                throw new NullReferenceException(" mainDir/ description is null", e);
            }
        }
        #endregion
        // generuje pełną ścieżkę do folderu na podstawie fullName rodzica oraz name dziecka
        public string AutoGenerateDirFullName()
        {
            if (ParrentDir.Description.FullName == null) throw new NullReferenceException("parrent fullName is null");
            string newFullName= $"{ParrentDir.Description.FullName}\\{Description.Name}";
            Description.FullName = newFullName;
            Console.WriteLine(newFullName);
            return newFullName;
        }


    }
}
